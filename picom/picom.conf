backend = "glx";
glx-no-stencil = false;
glx-copy-from-front = false;

#################################
#
# Shadows
#
#################################

# Enabled client-side shadows on windows.
shadow = true;
# The blur radius for shadows. (default 12)
shadow-radius = 8;
# The left offset for shadows. (default -15)
shadow-offset-x = -10;
# The top offset for shadows. (default -15)
shadow-offset-y = -10;
# The translucency for shadows. (default .75)
shadow-opacity = 0.00;

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way picom draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.

shadow-exclude = [
    "class_g = 'dwmsystray'",
	"class_g = 'Cairo-clock'" ,
	"class_g = 'CoverGloobus'",
	"class_g = 'Tilda'",
	"name ?= 'gnome-pie'",
	"class_g = 'Brave'",
	"class_g = 'Brave-beta'",
    "class_g = 'brave'",
	"class_g = 'Dmenu'",
#	"class_g ?= 'rofi'",
#	"class_g ?= 'polybar'",
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name *= 'VLC'",
    "class_g = 'VLC (TopWindow)'",
    "name *= 'Chromium'",
    "name *= 'Brave'",
    "name *= 'Chrome'",
    "class_g = 'Conky'",
    "class_g = 'Plank'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
    "class_g = 'Brave-browser'",
    "class_g = 'brave-browser'",
    "class_g = 'Blender'"
];

# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;


# Exclude conditions for background blur.

#################################
#
# Opacity
#
#################################

inactive-opacity = 0.650;
active-opacity = 0.99;
frame-opacity = 1;
inactive-opacity-override = false;
blur-background = true;
blur-kern = "11x11gaussian";
blur-method = "dual_kawase";
blur-size = 60;
#################################
#
# Fading
#
#################################

# Fade windows during opacity changes.
fading = true;
# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 1.2;
# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.02;
# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.02;
# Fade windows in/out when opening/closing
# no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [
      "name *= '- rofi'",
      "name *= '- Rofi'",
      "class_g = 'rofi'",
      "class_g = 'Rofi'",
      "class_g = 'Brave-browser'",
      "class_g = 'brave-browser'",
      "class_g = 'VLC (TopWindow)'",
      "name *= 'VLC'",
      "class_g = 'KotatogramDesktop'",
      "class_g = 'Blender'"
];


#################################
#
# Other
#
#################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = false;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 0;

# Vertical synchronization: match the refresh rate of the monitor
vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;
# Exclude conditions for background blur.
blur-background-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "class_g = 'URxvt'",
  "class_g = 'slop'",
  "_GTK_FRAME_EXTENTS@:c",
  "class_g = 'dmenu'",
  "class_g = 'brave'",
  "class_g = 'Blender'"
];
opacity-rule = [
    "91:class_g = 'KotatogramDesktop'",
    "88:class_g = 'Spotify'",
    "93:class_g = 'Code'",
    "89:class_g = 'Caprine'",
    "95:class_g = 'Emacs'",
    "90:class_g = 'polybar'"
];
# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [ ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
#
# Window type settings
#
#################################

wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = true;
        # opacity: Default opacity for the type of windows.
        opacity = 0.95;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
    utility =
	{
		shadow = false;
	};
};
